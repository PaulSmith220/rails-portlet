<%= image_tag 'overview.png', :alt => 'Technical overview', :style => 'float: right; width: 40%; padding: 20px;' -%>

<h1>Features</h1>
<p>
It is possible to build portlet applications using either MRI Ruby or JRuby with standard Rails package and development practices. 
</p>
<p>
The Java portlet is configured with an url and cookies to send a HTTP request to a remote server.
The HTTP response is being processed by <a href="http://htmlparser.sourceforge.net/">HTML Parser</a>. Each HTML node is being traversed in the &lt;head&gt; and &lt;body&gt; sections. The title of the page is being set as the portlet title. JavaScripts and CSS links are being included onto the portlet's body HTML. In the body, the links and forms are transformed to PortletUrls and ActionRequests.
</p>

<h2>Session management and security</h2>
<p>
User ID is passed from RenderRequest's REMOTE_USER to the remote server in a cookie. The remote application is authenticated transparently. Also any cookies set by the remote server are automatically added to succeeding requests, so it is possible to use Rails' <em>session[]</em> feature.
</p>
<p>
Liferay can also detect the context the portlet is deployed in. The group ID can be passed to the remote server in requst parameters. If you let Caterpillar handle this, @uid will automagically be set in Rails controller actions.
</p>

<p>
The mechanism to prevent request spoofing with a forged UID is based on a shared secret, that is given to the portlet at instantiation, inserted into a <em>special cookie</em>, and the value checked at the remote erver. Caterpillar provides handy helpers:

<p class="code">
class ApplicationController<br />
&nbsp; &nbsp; # Import security filters<br />
&nbsp; &nbsp; include Caterpillar::Security<br />
&nbsp; &nbsp; secure_portlet_sessions<br />
<br />

&nbsp; &nbsp;  # get @uid from cookie<br />
&nbsp; &nbsp;  before_filter :authorize, :only =&gt; :get_liferay_uid<br />
&nbsp; &nbsp;  before_filter :get_liferay_uid
</p>

After inserting this to your ApplicationController, you will have Liferay UID in @uid in your every action.

</p>

<h2>Database integration</h2>
<p>
Database integration is optional, for which you need the <em><a href="http://lportal.rubyforge.org/">lportal</a></em> gem, but so far it only works properly with PostgreSQL.
</p>




