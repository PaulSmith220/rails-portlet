<h1>A few words on development</h1>
<p>
Here are some practical guidelines for Rails portlet development. There are some cases where some limitations must be considered; however for most cases, the common Rails way works. -Mikael
</p>

<p>
News: 10 July 2009. The project is starting to merge with lportal, switch eventually to using Git and in general, maturing.
</p>

<h2>Sessions</h2>
<p>
Sessions are not fully supported at the moment. This means that you can use the session variable to store information when using XHR requests, but the cookie is cleared on the next page reload. Flash notices work.<br />

If the application is RESTful this should be no problem. Carrying the UID and other session information is usually enough. However, the portlet includes preliminary cookie support and completing it should be possible.
</p>

<h2>Liferay</h2>
The <a href="http://rubyforge.org/projects/lportal/">lportal</a> library models the Liferay database and offers a couple of handy features to manipulate other portlets and layouts. Read the <%= link_to 'documentation', 'http://lportal.rubyforge.org' -%> for tips.

<h2>Production mode</h2>
There are some minor things that are different for development and production modes. ...


<h1>Helpers</h1>

<h2>Portlet navigation in development</h2>
<%= image_tag 'caterpillar navigation.png', :alt => 'Caterpillar navigation', :style => 'float: right;' -%>

<p>Since portlet development differs a bit from standard Rails practises, and the portlet container handles the navigation and portlet placement (it works like a window manager on the web ;), Caterpillar offers a tool to navigate between various portlets you have. It takes a little bit of manual work to get it running.</p>


First, pluginize Caterpillar to your vendor/plugins. This also runs a generator which copies the necessary css, javascript and image files to the public/ folder.

<p class="code">
 $ caterpillar pluginize
</p>

Define the navigation filter in ApplicationController:

<p class="code">
 <span class="file">File: app/controllers/application.rb</span><br /><br />

     if RAILS_ENV=='development'<br />
&nbsp;&nbsp;       before_filter :caterpillar<br />
     end<br /><br />

     def caterpillar # :nodoc:<br />
&nbsp;&nbsp;       @caterpillar_navigation = Caterpillar::Navigation.rails<br />
&nbsp;&nbsp;       @caterpillar_navigation_defaults = {<br />
&nbsp;&nbsp;&nbsp;&nbsp;         :uid => 13904,<br />
&nbsp;&nbsp;&nbsp;&nbsp;         :gid => 13912<br />
&nbsp;&nbsp;       }<br />
     end
</p>

Create a minimal layout:

<p class="code">
 <span class="file">File: app/views/layouts/bear.html.erb</span><br /><br />

&lt;html&gt;<br />
&nbsp;&nbsp;  &lt;head&gt;&lt;/head&gt;<br />
&nbsp;&nbsp;  &lt;body&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;    &lt;% if @caterpillar_navigation -%&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      &lt;%= stylesheet_link_tag 'caterpillar/caterpillar' %&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      &lt;%= javascript_include_tag 'caterpillar/caterpillar' %&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      &lt;%= render :partial =&gt; "caterpillar/navigation" %&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;    &lt;% end -%&gt;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;    &lt;%= yield %&gt;<br />
&nbsp;&nbsp;&lt;/body&gt;<br />
&lt;/html&gt;
</p>

Use this layout in the controllers:

<p class="code">
 <span class="file">File: app/controllers/bear_controller.rb</span><br /><br />

  class BearController &lt; ApplicationController<br />
&nbsp;&nbsp;    layout 'bear'<br />
  end
</p>


If you want to run a development version of <i>lportal</i>, you can do a checkout to lib/lportal, and load it in initializers:


<p class="code">
 <span class="file">File: config/initializers/lportal.rb</span><br /><br />
	require File.join(RAILS_ROOT,'lib','lportal','init')
</p>




Finally launch the server and navigate to http://localhost:3000/bear/hungry

<p class="code">
 $ ./script/server 
</p>


<h2>Preparing the database</h2>
<p>
Create the development/production and test databases, and grant privileges for appropriate users. Use the password ”lportal” for this example.
</p>

With PostgreSQL:
<p class="code">
 $ sudo -u postgres createuser -S -D -R -l -i -P -E -e lportal<br />
    &gt; Enter password 'lportal'<br />
 $ sudo -u postgres createdb lportal -e -E UNICODE -O lportal<br /><br />

 $ sudo -u postgres createuser -S -d -R -l -i -P -E -e rails_test<br />
    &gt; Enter password 'rails'<br />
 $ sudo -u postgres createdb lportal_test -e -E UNICODE -O rails_test
</p>

With MySQL:
<p class="code">
 $ mysql -u root -p<br />
mysql> CREATE DATABASE lportal;<br />
mysql> GRANT ALL PRIVILEGES ON lportal.* TO lportal@'localhost' IDENTIFIED BY 'lportal';<br /><br />

mysql> CREATE DATABASE lportal_test;<br />
mysql> GRANT ALL PRIVILEGES ON lportal_test.* TO rails_test@'localhost' IDENTIFIED BY 'rails';
</p>

Run custom Caterpillar migrations:
<p class="code">
 $ caterpillar db:migrate
</p>

With Oracle:
<p class="code">
 $ sqlplus SYS AS SYSDBA<br/>
SQL> CREATE USER lportal IDENTIFIED BY lportal;<br/>
SQL> GRANT create session TO lportal;<br/>

SQL> GRANT connect, create table, resource, dba TO lportal;

Grant succeeded.


$ sqlplus / AS SYSDBA @portal-oracle.sql
</p>

<p>
Configure Liferay to use this database; refer to <a href="http://www.liferay.com/web/guest/community/wiki/-/wiki/Main/Portal%20Properties%205.2.2#section-Portal+Properties+5.2.2-JDBC">Liferay wiki</a>.
</p>


At this point you may either 

<p style="font-size:18px;">
A) start Liferay so that it will populate the database, or 
</p>
<p class="code">
Starting Liferay Portal Standard Edition 5.2.1 (Augustine / Build 5201 / February 3, 2009)<br />
15:07:38,317 WARN  [ReleaseLocalServiceImpl:82] Table 'lportal.Release_' doesn't exist<br />
15:07:38,318 INFO  [ReleaseLocalServiceImpl:95] Create tables and populate with default data<br />
</p>

<p style="font-size:18px;">
B) load some sample data from the <a href="http://www.liferay.com/web/guest/downloads/additional">Liferay Portal 5.2.3 SQL Scripts</a>.
</p>

<p class="code">
 $ cd liferay-portal-sql/5.2.3/portal<br />
 <br />
 # With MySQL:<br />
 $ mysql -u root -p --database lportal < portal-mysql.sql<br />
 <br />
 # With PostgreSQL:<br />
 $ sudo -u postgres psql -U lportal < portal-postgresql.sql<br />
</p>




<h2>Running tests</h2>
<p>
You only need to run these tests to make sure your database is supported and is working as expected.
</p>
Lportal has a test suite you should include to your tests. Rails test does not accept linking, so copy the suite from an appropriate location (or checkout from SVN/GIT). 
Run the commands in RAILS_ROOT.

<p class="code">
 $ cp -r $(pwd)/lib/lportal/test/unit test/unit/lportal
</p>

Prepare the database and run "caterpillar fixtures" to parse the live data from the RAILS_ENV database to static test fixtures. This will not overwrite your own fixtures, but you should have a copy of hand-written fixtires in your version control, anyway.

<p class="code">
 $ rake db:schema:dump<br />
 $ rake db:test:prepare<br />
 $ caterpillar fixtures
</p>

Enable a HACK if using PostgreSQL, edit test/test_helper.rb:
<pre>
class Test::Unit::TestCase
  require RAILS_ROOT+'/lib/lportal/active_record/fixtures'
</pre>

The first time you should be sure you have everything right, run the release test.
<p class="code">
 $ cd test && ruby unit/lportal/release_test.rb
</p>

Run the whole test suite:
<p class="code">
 $ rake test:units
</p>


